const { validateEmail, checkDisposableDomain, checkMXRecords } = require('./emailValidator');
const fs = require('fs');
const path = require('path');

// Sample fake emails from Random Lists (these are the ones visible in the search results)
const fakeEmails = [
  '[email protected]',
  '[email protected]',
  '[email protected]',
  '[email protected]',
  '[email protected]',
  '[email protected]',
  '[email protected]',
  '[email protected]',
  '[email protected]',
  '[email protected]',
  '[email protected]',
  '[email protected]'
];

// Additional fake emails that are commonly generated by such services
const additionalFakeEmails = [
  'test@example.com',
  'fake@test.com',
  'dummy@sample.org',
  'invalid@nonexistent.com',
  'spam@trashmail.com',
  'temp@10minutemail.com',
  'throwaway@guerrillamail.com',
  'disposable@mailinator.com',
  'fake@tempmail.org',
  'test@maildrop.cc',
  'dummy@temp-mail.org',
  'spam@throwaway.email',
  'fake@getnada.com',
  'test@sharklasers.com',
  'temp@guerrillamail.de',
  'dummy@guerrillamail.net',
  'spam@guerrillamail.org',
  'fake@guerrillamailblock.com',
  'test@pokemail.net',
  'temp@spam4.me',
  'dummy@bccto.me',
  'spam@chacuo.net',
  'fake@dispostable.com',
  'test@mailnesia.com',
  'temp@mailcatch.com',
  'dummy@inboxalias.com',
  'spam@mailmetrash.com',
  'fake@trashmail.net',
  'test@trashmailer.com',
  'temp@spamgourmet.com',
  'dummy@spamgourmet.net',
  'spam@spamgourmet.org',
  'fake@spamex.com',
  'test@spamhole.com',
  'temp@spam.la',
  'dummy@binkmail.com',
  'spam@bobmail.info',
  'fake@chammy.info',
  'test@devnullmail.com',
  'temp@letthemeatspam.com',
  'dummy@mailin8r.com',
  'spam@mailinator2.com',
  'fake@notmailinator.com',
  'test@reallymymail.com',
  'temp@reconmail.com',
  'dummy@safetymail.info',
  'spam@sogetthis.com',
  'fake@spamhereplease.com',
  'test@superrito.com',
  'temp@thisisnotmyrealemail.com',
  'dummy@tradermail.info',
  'spam@veryrealemail.com',
  'fake@wegwerfadresse.de',
  'test@wegwerfemail.de',
  'temp@wegwerfmail.de',
  'dummy@wegwerfmail.net',
  'spam@wegwerfmail.org',
  'fake@wegwerpmailadres.nl',
  'test@wetrainbayarea.com',
  'temp@wetrainbayarea.org',
  'dummy@wh4f.org',
  'spam@whyspam.me',
  'fake@wilemail.com',
  'test@willselfdestruct.com',
  'temp@wuzup.net',
  'dummy@wuzupmail.net',
  'spam@yeah.net',
  'fake@yopmail.com',
  'test@yopmail.net',
  'temp@yopmail.org',
  'dummy@ypmail.webarnak.fr.eu.org',
  'spam@cool.fr.nf',
  'fake@jetable.fr.nf',
  'test@nospam.ze.tc',
  'temp@nomail.xl.cx',
  'dummy@mega.zik.dj',
  'spam@speed.1s.fr',
  'fake@courriel.fr.nf',
  'test@moncourrier.fr.nf',
  'temp@monemail.fr.nf',
  'dummy@monmail.fr.nf',
  'spam@hootmail.com',
  'fake@hootmial.com',
  'test@gmaill.com',
  'temp@gmial.com',
  'dummy@yahooo.com',
  'spam@outlok.com'
];

// Combine all fake emails
const allFakeEmails = [...fakeEmails, ...additionalFakeEmails];

/**
 * Test email validation with fake emails
 */
async function testFakeEmails() {
  console.log('üß™ Testing Email Validator with Fake Emails');
  console.log('=' .repeat(60));
  console.log(`üìß Total emails to test: ${allFakeEmails.length}`);
  console.log('');

  const results = {
    total: allFakeEmails.length,
    valid: 0,
    invalid: 0,
    disposable: 0,
    typo: 0,
    formatErrors: 0,
    mxRecords: {
      found: 0,
      notFound: 0,
      errors: 0
    },
    details: []
  };

  console.log('üîç Starting validation tests...\n');

  for (let i = 0; i < allFakeEmails.length; i++) {
    const email = allFakeEmails[i];
    const progress = `[${i + 1}/${allFakeEmails.length}]`;
    
    try {
      // Basic format validation
      const formatResult = validateEmail(email);
      
      let result = {
        email,
        formatValid: formatResult.isValid,
        formatReason: formatResult.reason,
        domain: formatResult.domain,
        isDisposable: false,
        disposableReason: null,
        mxRecord: null,
        mxInfo: null,
        mxIP: null
      };

      if (formatResult.isValid && formatResult.domain) {
        // Check if disposable
        const disposableResult = await checkDisposableDomain(formatResult.domain);
        result.isDisposable = disposableResult.isDisposable;
        result.disposableReason = disposableResult.reason;

        // Check MX records
        const mxResult = await checkMXRecords(formatResult.domain);
        result.mxRecord = mxResult.primary;
        result.mxInfo = mxResult.info;
        result.mxIP = mxResult.ip;

        if (mxResult.primary) {
          results.mxRecords.found++;
        } else {
          results.mxRecords.notFound++;
        }
      } else {
        results.mxRecords.errors++;
      }

      // Update counters
      if (formatResult.isValid) {
        results.valid++;
        if (result.isDisposable) {
          results.disposable++;
        }
      } else {
        results.invalid++;
        if (formatResult.reason.includes('Typo')) {
          results.typo++;
        } else {
          results.formatErrors++;
        }
      }

      results.details.push(result);

      // Progress indicator
      if ((i + 1) % 10 === 0 || i === allFakeEmails.length - 1) {
        process.stdout.write(`\r${progress} Processed ${i + 1} emails...`);
      }

    } catch (error) {
      console.error(`\n‚ùå Error processing ${email}:`, error.message);
      results.details.push({
        email,
        error: error.message
      });
    }
  }

  console.log('\n\nüìä Test Results Summary');
  console.log('=' .repeat(60));
  console.log(`üìß Total emails tested: ${results.total}`);
  console.log(`‚úÖ Valid format: ${results.valid} (${((results.valid / results.total) * 100).toFixed(1)}%)`);
  console.log(`‚ùå Invalid format: ${results.invalid} (${((results.invalid / results.total) * 100).toFixed(1)}%)`);
  console.log(`üóëÔ∏è  Disposable emails detected: ${results.disposable} (${((results.disposable / results.total) * 100).toFixed(1)}%)`);
  console.log(`üî§ Typo detection: ${results.typo} (${((results.typo / results.total) * 100).toFixed(1)}%)`);
  console.log(`üìù Format errors: ${results.formatErrors} (${((results.formatErrors / results.total) * 100).toFixed(1)}%)`);
  console.log('');
  console.log('üåê MX Records Analysis:');
  console.log(`   ‚úÖ MX records found: ${results.mxRecords.found}`);
  console.log(`   ‚ùå No MX records: ${results.mxRecords.notFound}`);
  console.log(`   ‚ö†Ô∏è  DNS errors: ${results.mxRecords.errors}`);

  // Show detailed results for first 20 emails
  console.log('\nüìã Detailed Results (First 20 emails):');
  console.log('=' .repeat(80));
  
  const displayResults = results.details.slice(0, 20);
  displayResults.forEach((result, index) => {
    console.log(`\n${index + 1}. ${result.email}`);
    console.log(`   Format: ${result.formatValid ? '‚úÖ Valid' : '‚ùå Invalid'} - ${result.formatReason}`);
    
    if (result.domain) {
      console.log(`   Domain: ${result.domain}`);
      console.log(`   Disposable: ${result.isDisposable ? 'üóëÔ∏è Yes' : '‚úÖ No'} - ${result.disposableReason || 'N/A'}`);
      
      if (result.mxRecord) {
        console.log(`   MX Record: ‚úÖ ${result.mxRecord}`);
        if (result.mxIP) {
          console.log(`   MX IP: ${result.mxIP}`);
        }
      } else {
        console.log(`   MX Record: ‚ùå ${result.mxInfo}`);
      }
    }
  });

  // Save detailed results to file
  const reportPath = path.join(__dirname, 'test_results.json');
  fs.writeFileSync(reportPath, JSON.stringify(results, null, 2));
  console.log(`\nüíæ Detailed results saved to: ${reportPath}`);

  // Show some interesting statistics
  console.log('\nüîç Interesting Findings:');
  console.log('=' .repeat(40));
  
  const disposableEmails = results.details.filter(r => r.isDisposable);
  const validNonDisposable = results.details.filter(r => r.formatValid && !r.isDisposable);
  const invalidEmails = results.details.filter(r => !r.formatValid);
  
  console.log(`üóëÔ∏è  Disposable emails caught: ${disposableEmails.length}`);
  if (disposableEmails.length > 0) {
    console.log('   Examples:', disposableEmails.slice(0, 5).map(r => r.email).join(', '));
  }
  
  console.log(`‚úÖ Valid non-disposable emails: ${validNonDisposable.length}`);
  if (validNonDisposable.length > 0) {
    console.log('   Examples:', validNonDisposable.slice(0, 5).map(r => r.email).join(', '));
  }
  
  console.log(`‚ùå Invalid emails detected: ${invalidEmails.length}`);
  if (invalidEmails.length > 0) {
    console.log('   Examples:', invalidEmails.slice(0, 5).map(r => r.email).join(', '));
  }

  return results;
}

// Run the test
if (require.main === module) {
  testFakeEmails()
    .then(() => {
      console.log('\nüéâ Test completed successfully!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• Test failed:', error);
      process.exit(1);
    });
}

module.exports = { testFakeEmails, allFakeEmails };
